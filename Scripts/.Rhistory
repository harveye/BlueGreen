vertex.pie=rel.ab.list,
vertex.size=Psize, #Psize*0.8,#(abundance)*magn Use this if you want the size of the pie to be proportional to total abundance in the patch
vertex.label=NA)
plot(eval(parse(text= paste("Rep",levels(Prot.b$Replicate)[j],".","g",sep=""))),
layout=coords1,
vertex.shape="pie",
vertex.pie=rel.ab.list,
vertex.size=Psize*0.8, #Psize*0.8,#(abundance)*magn Use this if you want the size of the pie to be proportional to total abundance in the patch
vertex.label=NA)
plot(eval(parse(text= paste("Rep",levels(Prot.b$Replicate)[j],".","g",sep=""))),
layout=coords1,
vertex.shape="pie",
vertex.pie=rel.ab.list,
vertex.size=Psize*1.2, #Psize*0.8,#(abundance)*magn Use this if you want the size of the pie to be proportional to total abundance in the patch
vertex.label=NA)
Psize[which(Psize == 45)] =  Psize[which(Psize == 45)]*0.8
Psize[which(Psize != 45)] =  Psize[which(Psize == 45)]*1.2
plot(eval(parse(text= paste("Rep",levels(Prot.b$Replicate)[j],".","g",sep=""))),
Psize = Prot.b$Size[which(Prot.b$date == levels(Prot.b$date)[i] & Prot.b$Treatment==levels(Prot.b$Treatment)[k] & Prot.b$Replicate==levels(Prot.b$Replicate)[j])]
Psize = Prot.b$Size[which(Prot.b$date == levels(Prot.b$date)[i] & Prot.b$Treatment==levels(Prot.b$Treatment)[k] & Prot.b$Replicate==levels(Prot.b$Replicate)[j])]
Psize[which(Psize == 45)] =  Psize[which(Psize == 45)]*0.8
Psize[which(Psize != 45)] =  Psize[which(Psize != 45)]*1.2
plot(eval(parse(text= paste("Rep",levels(Prot.b$Replicate)[j],".","g",sep=""))),
layout=coords1,
vertex.shape="pie",
vertex.pie=rel.ab.list,
vertex.size=Psize, #Psize*0.8,#(abundance)*magn Use this if you want the size of the pie to be proportional to total abundance in the patch
vertex.label=NA)
Psize
Psize = Prot.b$Size[which(Prot.b$date == levels(Prot.b$date)[i] & Prot.b$Treatment==levels(Prot.b$Treatment)[k] & Prot.b$Replicate==levels(Prot.b$Replicate)[j])]
Psize
Psize[which(Psize == 45)] =  Psize[which(Psize == 45)]*0.8
Psize
which(Psize != 45)
Psize[which(Psize != 36)] =  Psize[which(Psize != 36)]*1.2
plot(eval(parse(text= paste("Rep",levels(Prot.b$Replicate)[j],".","g",sep=""))),
layout=coords1,
vertex.shape="pie",
vertex.pie=rel.ab.list,
vertex.size=Psize, #Psize*0.8,#(abundance)*magn Use this if you want the size of the pie to be proportional to total abundance in the patch
vertex.label=NA)
Psize = Prot.b$Size[which(Prot.b$date == levels(Prot.b$date)[i] & Prot.b$Treatment==levels(Prot.b$Treatment)[k] & Prot.b$Replicate==levels(Prot.b$Replicate)[j])]
Psize[which(Psize == 45)] =  Psize[which(Psize == 45)]*0.8
Psize[which(Psize != 36)] =  Psize[which(Psize != 36)]*1.5
plot(eval(parse(text= paste("Rep",levels(Prot.b$Replicate)[j],".","g",sep=""))),
layout=coords1,
vertex.shape="pie",
vertex.pie=rel.ab.list,
vertex.size=Psize, #Psize*0.8,#(abundance)*magn Use this if you want the size of the pie to be proportional to total abundance in the patch
vertex.label=NA)
Psize = Prot.b$Size[which(Prot.b$date == levels(Prot.b$date)[i] & Prot.b$Treatment==levels(Prot.b$Treatment)[k] & Prot.b$Replicate==levels(Prot.b$Replicate)[j])]
plot(eval(parse(text= paste("Rep",levels(Prot.b$Replicate)[j],".","g",sep=""))),
layout=coords1,
vertex.shape="pie",
vertex.pie=rel.ab.list,
vertex.size=Psize, #Psize*0.8,#(abundance)*magn Use this if you want the size of the pie to be proportional to total abundance in the patch
vertex.label=NA)
Psize = Prot.b$Size[which(Prot.b$date == levels(Prot.b$date)[i] & Prot.b$Treatment==levels(Prot.b$Treatment)[k] & Prot.b$Replicate==levels(Prot.b$Replicate)[j])]
#...Plot the figure
#..Generate figure layout corresponding to replicate landscape
coords1 <- layout_on_grid(eval(parse(text= paste("Rep",levels(Prot.b$Replicate)[j],".","g",sep=""))),width=6,height=6) #set the rectangular layout
coords1[,2] <- max(coords1[,2])-coords1[,2]
Psize[which(Psize == 45)] =  Psize[which(Psize == 45)]*0.8
Psize[which(Psize != 36)] =  Psize[which(Psize != 36)]*1.5
plot(eval(parse(text= paste("Rep",levels(Prot.b$Replicate)[j],".","g",sep=""))),
layout=coords1,
vertex.shape="pie",
vertex.pie=rel.ab.list,
vertex.size=Psize, #Psize*0.8,#(abundance)*magn Use this if you want the size of the pie to be proportional to total abundance in the patch
vertex.label=NA)
?plot()
?plot.igraph()
Psize = Prot.b$Size[which(Prot.b$date == levels(Prot.b$date)[i] & Prot.b$Treatment==levels(Prot.b$Treatment)[k] & Prot.b$Replicate==levels(Prot.b$Replicate)[j])]
plot(eval(parse(text= paste("Rep",levels(Prot.b$Replicate)[j],".","g",sep=""))),
layout=coords1,
vertex.shape="pie",
vertex.pie=rel.ab.list,
vertex.size=20,#(abundance)*magn Use this if you want the size of the pie to be proportional to total abundance in the patch
vertex.label=Psize,
label.dist=1)
install.packages("igraph")
Clear any variables from the R environment
##################
rm(list=ls())
# search()
# detach(pos=3)
##################
#Directory paths
##################
datapath = "~/Documents/Research/1.Projects/Eawag/Projects/8.Blue-Green/BlueGreen/Data/"
to.script = "~/Documents/Research/1.Projects/Eawag/Projects/8.Blue-Green/BlueGreen/Scripts/"
graphpath = "~/Documents/Research/1.Projects/Eawag/Projects/8.Blue-Green/4.Results/"
##################
#Load packages
##################
# library(vegan)
library(plyr)
library(plotrix)
# library(sciplot)
# library(car)
# library(MASS)
##################
#Load data in R environment
##################
Prot.b0 =  read.delim(paste0(datapath,"BG_protist_data_(20170307).txt")) #Protist
Prot.b = Prot.b0
##################
#Fix data structure and add variables
##################
#...Rename dates consistently (they are not)
Prot.b$date = with(Prot.b,revalue(date, c("16-05-02"="20160502", "16-05-23"="20160523","16-05-31"="20160531","5/17/2016"="20160517","5/9/2016"="20160509")))
Prot.b$date = factor(Prot.b$date,levels=c("20160502","20160509","20160517","20160523","20160531"))
#...Create a new variable called day
Prot.b = Prot.b[order(Prot.b$date),] #make sure that data are ordered by dates
Prot.b$day = c(rep(0,30),rep(7,302),rep(15,302),rep(21,302),rep(29,302))
#...Remove day 0 as it won't be used (day 0 is data from the pooled initial cultures --> not part of the experimental design)
#...Remove monoculture
Prot.b = Prot.b[which(Prot.b$day != 0),]
Prot.b = Prot.b[which(Prot.b$Treatment != "monoculture"),]
#...Convert species abundance per ul into abundance per ML
species = c("Rot","Spi","Ble","Pca","Col","Chi","Tet","Other")
Prot.b[,species] = Prot.b[,species]*1000
#... add species richness per patch column
species = c("Rot","Spi","Ble","Pca","Col","Chi","Tet","Other")
Prot.b$richness = apply(Prot.b[,species]>0,1,sum)
##################
#Specify factors and Drop unused levels
##################
Prot.b$Size = as.numeric(as.character(Prot.b$Size))
#Prot.b$Size = factor(Prot.b$Size)
Prot.b = droplevels(Prot.b)
#########################################################################
################# NETWORK FIGURES
#########################################################################
#...Build the dendritic landscapes from connectivity matrices and calculate network metrics of interest
library(igraph)
source(paste0(to.script,"Network_metric_bg.R"))
#...Set the color palette for each species
library(RColorBrewer)
display.brewer.all(n=7,type="qual",colorblindFriendly = T)
pal = brewer.pal(n=7,name="Dark2")
rbPal <- colorRampPalette(pal,space="Lab")
#...Add those colors to the properties of the igraph file
V(RepA.g)$pie.color=list(rbPal(7))
V(RepB.g)$pie.color=list(rbPal(7))
V(RepC.g)$pie.color=list(rbPal(7))
V(RepD.g)$pie.color=list(rbPal(7))
i=1
j=1
k=1
rel.ab = Prot.b[which(Prot.b$date == levels(Prot.b$date)[i] & Prot.b$Treatment==levels(Prot.b$Treatment)[k] & Prot.b$Replicate==levels(Prot.b$Replicate)[j]),species[-8]]
rel.ab = rel.ab+0.00000000000000000000000000000001
rel.ab.list <- as.list(as.data.frame(t(rel.ab)))
#abundance = Prot.b$Pcount[which(Prot.b$date == levels(Prot.b$date)[i] & Prot.b$Treatment==levels(Prot.b$Treatment)[k] & Prot.b$Replicate==levels(Prot.b$Replicate)[j])]
Psize = Prot.b$Size[which(Prot.b$date == levels(Prot.b$date)[i] & Prot.b$Treatment==levels(Prot.b$Treatment)[k] & Prot.b$Replicate==levels(Prot.b$Replicate)[j])]
Psize
coords1 <- layout_on_grid(eval(parse(text= paste("Rep",levels(Prot.b$Replicate)[j],".","g",sep=""))),width=6,height=6) #set the rectangular layout
coords1[,2] <- max(coords1[,2])-coords1[,2]
plot(eval(parse(text= paste("Rep",levels(Prot.b$Replicate)[j],".","g",sep=""))),
layout=coords1,
vertex.shape="pie",
vertex.pie=rel.ab.list,
vertex.size=20,#(abundance)*magn Use this if you want the size of the pie to be proportional to total abundance in the patch
vertex.label=Psize,
label.dist=1)
plot(eval(parse(text= paste("Rep",levels(Prot.b$Replicate)[j],".","g",sep=""))),
layout=coords1,
vertex.shape="pie",
vertex.pie=rel.ab.list,
vertex.size=20,#(abundance)*magn Use this if you want the size of the pie to be proportional to total abundance in the patch
vertex.label=Psize,
label.degree=0)
plot(eval(parse(text= paste("Rep",levels(Prot.b$Replicate)[j],".","g",sep=""))),
layout=coords1,
vertex.shape="pie",
vertex.pie=rel.ab.list,
vertex.size=20,#(abundance)*magn Use this if you want the size of the pie to be proportional to total abundance in the patch
vertex.label=Psize,
label.dist=0)
plot(eval(parse(text= paste("Rep",levels(Prot.b$Replicate)[j],".","g",sep=""))),
layout=coords1,
vertex.shape="pie",
vertex.pie=rel.ab.list,
vertex.size=20,#(abundance)*magn Use this if you want the size of the pie to be proportional to total abundance in the patch
vertex.label=Psize,
vertex.label.dist=0)
plot(eval(parse(text= paste("Rep",levels(Prot.b$Replicate)[j],".","g",sep=""))),
layout=coords1,
vertex.shape="pie",
vertex.pie=rel.ab.list,
vertex.size=20,#(abundance)*magn Use this if you want the size of the pie to be proportional to total abundance in the patch
vertex.label=Psize,
vertex.label.dist=0,
vertex.label.col="red")
plot(eval(parse(text= paste("Rep",levels(Prot.b$Replicate)[j],".","g",sep=""))),
layout=coords1,
vertex.shape="pie",
vertex.pie=rel.ab.list,
vertex.size=20,#(abundance)*magn Use this if you want the size of the pie to be proportional to total abundance in the patch
vertex.label=Psize,
vertex.label.dist=0,
label.col="red")
plot(eval(parse(text= paste("Rep",levels(Prot.b$Replicate)[j],".","g",sep=""))),
layout=coords1,
vertex.shape="pie",
vertex.pie=rel.ab.list,
vertex.size=20,#(abundance)*magn Use this if you want the size of the pie to be proportional to total abundance in the patch
label=Psize,
vertex.label.dist=0,
label.col="red")
Psize
plot(eval(parse(text= paste("Rep",levels(Prot.b$Replicate)[j],".","g",sep=""))),
layout=coords1,
vertex.shape="pie",
vertex.pie=rel.ab.list,
vertex.size=20,#(abundance)*magn Use this if you want the size of the pie to be proportional to total abundance in the patch
label=Psize,
label.dist=0,
label.col="red")
plot(eval(parse(text= paste("Rep",levels(Prot.b$Replicate)[j],".","g",sep=""))),
layout=coords1,
vertex.shape="pie",
vertex.pie=rel.ab.list,
vertex.size=20,#(abundance)*magn Use this if you want the size of the pie to be proportional to total abundance in the patch
vertex.label=Psize,
label.dist=0,
label.col="red")
plot(eval(parse(text= paste("Rep",levels(Prot.b$Replicate)[j],".","g",sep=""))),
layout=coords1,
vertex.shape="pie",
vertex.pie=rel.ab.list,
vertex.size=20,#(abundance)*magn Use this if you want the size of the pie to be proportional to total abundance in the patch
vertex.label=Psize,
vertex.label.dist=0,
vertex.label.col="red")
plot.igraph(eval(parse(text= paste("Rep",levels(Prot.b$Replicate)[j],".","g",sep=""))),
layout=coords1,
vertex.shape="pie",
vertex.pie=rel.ab.list,
vertex.size=20,#(abundance)*magn Use this if you want the size of the pie to be proportional to total abundance in the patch
vertex.label=Psize,
vertex.label.dist=0,
vertex.label.col="red")
plot.igraph(eval(parse(text= paste("Rep",levels(Prot.b$Replicate)[j],".","g",sep=""))),
layout=coords1,
vertex.shape="pie",
vertex.pie=rel.ab.list,
vertex.size=20,#(abundance)*magn Use this if you want the size of the pie to be proportional to total abundance in the patch
vertex.label=T,
vertex.label.dist=0,
vertex.label.col="red")
plot.igraph(eval(parse(text= paste("Rep",levels(Prot.b$Replicate)[j],".","g",sep=""))),
layout=coords1,
vertex.shape="pie",
vertex.pie=rel.ab.list,
vertex.size=20,#(abundance)*magn Use this if you want the size of the pie to be proportional to total abundance in the patch
vertex.label=NA,
vertex.label.dist=0,
vertex.label.col="red")
plot.igraph(eval(parse(text= paste("Rep",levels(Prot.b$Replicate)[j],".","g",sep=""))),
layout=coords1,
vertex.shape="pie",
vertex.pie=rel.ab.list,
vertex.size=Psize,#(abundance)*magn Use this if you want the size of the pie to be proportional to total abundance in the patch
vertex.label=NA,
vertex.label.dist=0,
vertex.label.col="red")
plot.igraph(eval(parse(text= paste("Rep",levels(Prot.b$Replicate)[j],".","g",sep=""))),
layout=coords1,
vertex.shape="pie",
vertex.pie=rel.ab.list,
vertex.size=30,#(abundance)*magn Use this if you want the size of the pie to be proportional to total abundance in the patch
vertex.label=NA,
vertex.label.dist=0,
vertex.label.col="red")
plot.igraph(eval(parse(text= paste("Rep",levels(Prot.b$Replicate)[j],".","g",sep=""))),
layout=coords1,
vertex.shape="pie",
vertex.pie=rel.ab.list,
vertex.size=20,#(abundance)*magn Use this if you want the size of the pie to be proportional to total abundance in the patch
vertex.label=NA,
vertex.label.dist=0,
vertex.label.col="red")
plot.igraph(eval(parse(text= paste("Rep",levels(Prot.b$Replicate)[j],".","g",sep=""))),
layout=coords1,
vertex.shape="pie",
vertex.pie=rel.ab.list,
plot.igraph(eval(parse(text= paste("Rep",levels(Prot.b$Replicate)[j],".","g",sep=""))),
layout=coords1,
vertex.shape="pie",
vertex.pie=rel.ab.list,
vertex.size=20,#(abundance)*magn Use this if you want the size of the pie to be proportional to total abundance in the patch
vertex.label=Psize,
vertex.label.dist=5,
vertex.label.col="red")
plot.igraph(eval(parse(text= paste("Rep",levels(Prot.b$Replicate)[j],".","g",sep=""))),
layout=coords1,
vertex.shape="pie",
vertex.pie=rel.ab.list,
vertex.size=20,#(abundance)*magn Use this if you want the size of the pie to be proportional to total abundance in the patch
vertex.label=Psize,
vertex.label.dist=5,
vertex.label.color="red")
plot.igraph(eval(parse(text= paste("Rep",levels(Prot.b$Replicate)[j],".","g",sep=""))),
layout=coords1,
vertex.shape="pie",
vertex.pie=rel.ab.list,
vertex.size=20,#(abundance)*magn Use this if you want the size of the pie to be proportional to total abundance in the patch
vertex.label=Psize,
vertex.label.dist=2,
vertex.label.color="red")
plot.igraph(eval(parse(text= paste("Rep",levels(Prot.b$Replicate)[j],".","g",sep=""))),
layout=coords1,
vertex.shape="pie",
vertex.pie=rel.ab.list,
vertex.size=20,#(abundance)*magn Use this if you want the size of the pie to be proportional to total abundance in the patch
vertex.label=Psize,
vertex.label.dist=1,
vertex.label.color="red")
plot.igraph(eval(parse(text= paste("Rep",levels(Prot.b$Replicate)[j],".","g",sep=""))),
layout=coords1,
vertex.shape="pie",
vertex.pie=rel.ab.list,
vertex.size=20,#(abundance)*magn Use this if you want the size of the pie to be proportional to total abundance in the patch
vertex.label=Psize,
vertex.label.dist=5,
vertex.label.degree=0,
vertex.label.color="red")
plot.igraph(eval(parse(text= paste("Rep",levels(Prot.b$Replicate)[j],".","g",sep=""))),
layout=coords1,
vertex.shape="pie",
vertex.pie=rel.ab.list,
vertex.size=20,#(abundance)*magn Use this if you want the size of the pie to be proportional to total abundance in the patch
vertex.label=Psize,
vertex.label.degree=0,
vertex.label.color="red")
pi/2
plot.igraph(eval(parse(text= paste("Rep",levels(Prot.b$Replicate)[j],".","g",sep=""))),
layout=coords1,
vertex.shape="pie",
vertex.pie=rel.ab.list,
vertex.size=20,#(abundance)*magn Use this if you want the size of the pie to be proportional to total abundance in the patch
vertex.label=Psize,
vertex.label.dist=5,
vertex.label.degree=-pi/2,
vertex.label.color="red")
plot.igraph(eval(parse(text= paste("Rep",levels(Prot.b$Replicate)[j],".","g",sep=""))),
layout=coords1,
vertex.shape="pie",
vertex.pie=rel.ab.list,
vertex.size=20,#(abundance)*magn Use this if you want the size of the pie to be proportional to total abundance in the patch
vertex.label=Psize,
vertex.label.dist=0,
vertex.label.degree=-pi/2,
vertex.label.color="red")
plot.igraph(eval(parse(text= paste("Rep",levels(Prot.b$Replicate)[j],".","g",sep=""))),
layout=coords1,
vertex.shape="pie",
vertex.pie=rel.ab.list,
vertex.size=20,#(abundance)*magn Use this if you want the size of the pie to be proportional to total abundance in the patch
vertex.label=Psize,
vertex.label.dist=1,
vertex.label.degree=-pi/2,
vertex.label.color="red")
plot.igraph(eval(parse(text= paste("Rep",levels(Prot.b$Replicate)[j],".","g",sep=""))),
layout=coords1,
vertex.shape="pie",
vertex.pie=rel.ab.list,
vertex.size=20,#(abundance)*magn Use this if you want the size of the pie to be proportional to total abundance in the patch
vertex.label=Psize,
vertex.label.dist=2,
vertex.label.degree=-pi/2,
vertex.label.color="red")
plot.igraph(eval(parse(text= paste("Rep",levels(Prot.b$Replicate)[j],".","g",sep=""))),
layout=coords1,
vertex.shape="pie",
vertex.pie=rel.ab.list,
vertex.size=20,#(abundance)*magn Use this if you want the size of the pie to be proportional to total abundance in the patch
vertex.label=Psize,
vertex.label.dist=2.4,
vertex.label.degree=-pi/2,
vertex.label.color="red")
plot.igraph(eval(parse(text= paste("Rep",levels(Prot.b$Replicate)[j],".","g",sep=""))),
layout=coords1,
vertex.shape="pie",
vertex.pie=rel.ab.list,
vertex.size=20,#(abundance)*magn Use this if you want the size of the pie to be proportional to total abundance in the patch
vertex.label=Psize,
vertex.label.dist=2.4,
vertex.label.degree=-pi/2,
vertex.label.color="black",
vertex.label.cex=0.5)
plot.igraph(eval(parse(text= paste("Rep",levels(Prot.b$Replicate)[j],".","g",sep=""))),
layout=coords1,
vertex.shape="pie",
vertex.pie=rel.ab.list,
vertex.size=20,#(abundance)*magn Use this if you want the size of the pie to be proportional to total abundance in the patch
vertex.label=Psize,
vertex.label.dist=2.4,
vertex.label.degree=-pi/2,
vertex.label.color="black",
vertex.label.cex=0.5,
vertex.label.font=2)
plot.igraph(eval(parse(text= paste("Rep",levels(Prot.b$Replicate)[j],".","g",sep=""))),
layout=coords1,
vertex.shape="pie",
vertex.pie=rel.ab.list,
vertex.size=20,#(abundance)*magn Use this if you want the size of the pie to be proportional to total abundance in the patch
vertex.label=Psize,
vertex.label.dist=2.2,
vertex.label.degree=-pi/2,
vertex.label.color="black",
vertex.label.cex=0.5,
vertex.label.font=2)
plot.igraph(eval(parse(text= paste("Rep",levels(Prot.b$Replicate)[j],".","g",sep=""))),
layout=coords1,
vertex.shape="pie",
vertex.pie=rel.ab.list,
vertex.size=20,#(abundance)*magn Use this if you want the size of the pie to be proportional to total abundance in the patch
vertex.label=Psize,
vertex.label.dist=2.2,
vertex.label.degree=-pi/2,
vertex.label.color="black",
vertex.label.cex=0.8,
vertex.label.font=2)
..A loop to plot one figure for each date of each replicate and across the two treatments (isolated vs. connected)
for(i in 1:nlevels(Prot.b$date)) {
for(j in 1:nlevels(Prot.b$Replicate)) {
for(k in 1:nlevels(Prot.b$Treatment)) {
#...Extract density data for each species
rel.ab = Prot.b[which(Prot.b$date == levels(Prot.b$date)[i] & Prot.b$Treatment==levels(Prot.b$Treatment)[k] & Prot.b$Replicate==levels(Prot.b$Replicate)[j]),species[-8]]
rel.ab = rel.ab+0.00000000000000000000000000000001
rel.ab.list <- as.list(as.data.frame(t(rel.ab)))
#abundance = Prot.b$Pcount[which(Prot.b$date == levels(Prot.b$date)[i] & Prot.b$Treatment==levels(Prot.b$Treatment)[k] & Prot.b$Replicate==levels(Prot.b$Replicate)[j])]
Psize = Prot.b$Size[which(Prot.b$date == levels(Prot.b$date)[i] & Prot.b$Treatment==levels(Prot.b$Treatment)[k] & Prot.b$Replicate==levels(Prot.b$Replicate)[j])]
#...Plot the figure
#..Generate figure layout corresponding to replicate landscape
coords1 <- layout_on_grid(eval(parse(text= paste("Rep",levels(Prot.b$Replicate)[j],".","g",sep=""))),width=6,height=6) #set the rectangular layout
coords1[,2] <- max(coords1[,2])-coords1[,2]
pdf(paste0(graphpath,"PROT_NET_FIGS/","Blue",levels(Prot.b$Replicate)[j],levels(Prot.b$Treatment)[k],"Prot",levels(Prot.b$date)[i],".pdf"),width=8,height=8)
#if(i==4) magn=0.008 else magn=0.001
#Psize[which(Psize == 45)] =  Psize[which(Psize == 45)]*0.8
#Psize[which(Psize != 36)] =  Psize[which(Psize != 36)]*1.5
plot.igraph(eval(parse(text= paste("Rep",levels(Prot.b$Replicate)[j],".","g",sep=""))),
layout=coords1,
vertex.shape="pie",
vertex.pie=rel.ab.list,
vertex.size=20,#(abundance)*magn Use this if you want the size of the pie to be proportional to total abundance in the patch
vertex.label=Psize,
vertex.label.dist=2.2,
vertex.label.degree=-pi/2,
vertex.label.color="black",
vertex.label.cex=0.8,
vertex.label.font=2)
#Legend
col.labels=species[-8]#c("Rot","Spi","Ble","PCA","Col","Chi","Tet")
testcol = rbPal(7) #c("#FF0000FF","#FFDB00FF","#49FF00FF","#00FF92FF","#0092FFFF","#4900FFFF","#FF00DBFF")
color.legend(-1.2,-0.3,-1.4,-1,col.labels,testcol,cex=1,gradient="y")
#dif between x1 and xr is the width of the rectangle
dev.off()
}
}
}
test <- data.frame(treatment = rnorm(500,10,5), control=rnorm(500,10,5))
test
library(boot)
set.seed(2)
yourFun <- function(x, i) {
xSub <- x[i, ] #resample x
LnRR <- log(xSub[, 1]/xSub[ ,2])
return(mean(LnRR))
}
min(test$treatment)
sample(500,1:10000)
?sample()
sample(c(1:10000),n=10)
c(1:10000)
sample(c(1:10000),size=10)
test <- data.frame(treatment = sample(c(1:10000),size=500), control=sample(c(1:10000),size=500))
test
b <- boot(test, yourFun, R=999)
plot(b)
b$t0 # meanLRR
ci <-boot.ci(b,type="norm")
b$t0 # meanLRR
ci$normal[2] #lower ci
ci$normal[3] #upper ci
(LRRs_ind <- mean(log(test$treatment/test$control)))
(LRR_mean_ratio <- log( mean(test$treatment)/mean(test$control) ) ) #log ratio OF the mean
(LRR_sum <- log(sum(test$treatment/test$control))) #log of the sum of ratio
LRR <- log(mean(test$treatment/test$control)) #log of the mean ratio
(LRR <- log(mean(test$treatment/test$control))) #log of the mean ratio
b$t0 #Boot
(LRRs_ind <- mean(log(test$treatment/test$control))) #mean of each log ratio
(LRR_mean_ratio <- log( mean(test$treatment)/mean(test$control) ) ) #log ratio OF the mean
test <- data.frame(treatment = sample(c(1:1000),size=1000), control=sample(c(1:1000),size=1000))
b <- boot(test, yourFun, R=999)
plot(b)
b$t0 #Boot
(LRRs_ind <- mean(log(test$treatment/test$control))) #mean of each log ratio
(LRR_mean_ratio <- log( mean(test$treatment)/mean(test$control) ) ) #log ratio OF the mean
mean(test$treatment)
mean(test$control)
test <- data.frame(treatment = sample(c(1:1000000),size=1000), control=sample(c(1:1000000),size=1000))
b <- boot(test, yourFun, R=999)
plot(b)
b$t0 #Boot
(LRRs_ind <- mean(log(test$treatment/test$control))) #mean of each log ratio
(LRR_mean_ratio <- log( mean(test$treatment)/mean(test$control) ) ) #log ratio OF the mean
(LRR_sum <- log(sum(test$treatment/test$control))) #log of the sum of ratio
(LRR <- log(mean(test$treatment/test$control))) #log of the mean ratio
####Generate data for LRR calculation (for bacteria in blue ecosystem)
