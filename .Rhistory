geom_errorbar(aes(ymin=degree-se, ymax=degree+se), width=0) +
geom_point() + theme_classic()
# Filter data (bacteria were only measured for replicates A and B)
X.bact <- data %>%
filter(day!=0 & Replicate %in% c("A","B")) %>%
mutate(Treatment = as.factor(Treatment),
day = factor(day,levels=c("7","15","21","29")),
day.cont = log(as.numeric(as.character(day))),
Size = as.numeric(as.character(Size)),
centrality = as.numeric(as.character(centrality)),
dist.outlet = as.numeric(as.character(dist.outlet)))
X.prot <- data %>%
filter(day!=0 & Replicate %in% c("A","B","C","D")) %>%
mutate(Treatment = as.factor(Treatment),
day = factor(day,levels=c("7","15","21","29")),
day.cont = log(as.numeric(as.character(day))),
Size = as.numeric(as.character(Size)),
centrality = as.numeric(as.character(centrality)),
dist.outlet = as.numeric(as.character(dist.outlet)))
# Run model
Mod1 <- nlme:::lme(log(bact.blue) ~ Treatment*Size*day.cont + bact.green,
random = ~ 1|Replicate, data=X.bact,
method="ML",control=lmeControl(optimMethod="BFGS",maxIter=100,opt="optim"))
summary(Mod1)$tTable
# Run model
Mod1 <- nlme:::lme(log(bact.blue) ~ Treatment*Size + bact.green,
random = ~ day|Replicate, data=X.bact,
method="ML",control=lmeControl(optimMethod="BFGS",maxIter=100,opt="optim"))
summary(Mod1)$tTable
hist(Mod1$residuals)
Mod1 <- nlme:::lme(bact.blue ~ Treatment*Size + bact.green,
random = ~ day|Replicate, data=X.bact,
method="ML",control=lmeControl(optimMethod="BFGS",maxIter=100,opt="optim"))
hist(Mod1$residuals)
# Run model
Mod1 <- nlme:::lme(log(bact.blue) ~ Treatment*Size + bact.green,
random = ~ day|Replicate, data=X.bact,
method="ML",control=lmeControl(optimMethod="BFGS",maxIter=100,opt="optim"))
hist(Mod1$residuals)
summary(Mod1)$tTable
# Run model
Mod1 <- nlme:::lme(bact.blue ~ Treatment*Size + bact.green,
random = ~ day|Replicate, data=X.bact,
method="ML",control=lmeControl(optimMethod="BFGS",maxIter=100,opt="optim"))
hist(Mod1$residuals)
summary(Mod1)$tTable
# Run model
Mod1 <- nlme:::lme(bact.blue ~ Treatment*Size + bact.green,
random = ~ day|Replicate, data=X.bact,
method="ML",control=lmeControl(optimMethod="BFGS",maxIter=100,opt="optim"))
summary(Mod1)$tTable
Mod1 <- nlme:::lme(bact.blue ~ Treatment*Size*day.cont + bact.green,
random = ~ day|Replicate, data=X.bact,
method="ML",control=lmeControl(optimMethod="BFGS",maxIter=100,opt="optim"))
summary(Mod1)$tTable
ggplot(mapping=aes(x=Treatment,y=bact.blue),data=X.bact) +
geom_boxplot(col="blue",alpha=0.5) -> p1
p1
# Run model
Mod1 <- nlme:::lme(bact.blue ~ Treatment*Size*day + bact.green,
random = ~ 1|Replicate, data=X.bact,
method="ML",control=lmeControl(optimMethod="BFGS",maxIter=100,opt="optim"))
summary(Mod1)$tTable
# Run model
Mod1 <- nlme:::lme(bact.blue ~ Treatment*Size*day.cont + bact.green,
random = ~ 1|Replicate, data=X.bact,
method="ML",control=lmeControl(optimMethod="BFGS",maxIter=100,opt="optim"))
summary(Mod1)$tTable
# Generate data frame with each predictor to extract predictions
newdat <-  with(X.bact,
expand.grid(Treatment=unique(Treatment),
Size = c(min(Size),max(Size)),
bact.green=c(min(bact.green),max(bact.green)),
day.cont = c(min(day.cont),max(day.cont))))
X.1 <- X.bact %>%
filter(day==29)
ggplot(mapping=aes(x=as.factor(Size),y=log(bact.blue)),data=X.1) +
geom_boxplot(col="blue",alpha=0.5) -> p1
ggplot(mapping=aes(x=day.cont,y=log(bact.blue)),data=X.bact) +
geom_point(col="blue",alpha=0.5) +
geom_line(data=newdat,aes(y=predict(Mod1,newdata=newdat,level=0)),col="red") -> p2
grid.arrange(p1,p2,ncol=2)
# Generate data frame with each predictor to extract predictions
newdat <-  with(X.bact,
expand.grid(Treatment=unique(Treatment),
Size = c(min(Size),max(Size)),
bact.green=c(min(bact.green),max(bact.green)),
day.cont = c(min(day.cont),max(day.cont))))
X.1 <- X.bact %>%
filter(day==29)
ggplot(mapping=aes(x=as.factor(Size),y=log(bact.blue)),data=X.1) +
geom_boxplot(col="blue",alpha=0.5) -> p1
ggplot(mapping=aes(x=day.cont,y=bact.blue),data=X.bact) +
geom_point(col="blue",alpha=0.5) +
geom_line(data=newdat,aes(y=predict(Mod1,newdata=newdat,level=0)),col="red") -> p2
grid.arrange(p1,p2,ncol=2)
# Run model
Mod2 <- nlme:::lme(prot.ab ~ Treatment*Size*day.cont,
random = ~ 1|Replicate, data=X.prot,
method="ML",control=lmeControl(optimMethod="BFGS",maxIter=100,opt="optim"))
summary(Mod2)$tTable
# Run model
Mod2 <- nlme:::lme(prot.ab ~ Treatment*Size,
random = ~ day|Replicate, data=X.prot,
method="ML",control=lmeControl(optimMethod="BFGS",maxIter=100,opt="optim"))
summary(Mod2)$tTable
ggplot(mapping=aes(x=Treatment,y=prot.dens),data=X.prot) +
geom_boxplot(col="blue",alpha=0.5)
ggplot(mapping=aes(x=Treatment,y=prot.ab),data=X.prot) +
geom_boxplot(col="blue",alpha=0.5)
# Run model
Mod2 <- nlme:::lme(prot.ab ~ Treatment*Size*day.cont,
random = ~ day|Replicate, data=X.prot,
method="ML",control=lmeControl(optimMethod="BFGS",maxIter=100,opt="optim"))
summary(Mod2)$tTable
# Run model
Mod2 <- nlme:::lme(prot.ab ~ Treatment*Size*day.cont,
random = ~ 1|Replicate, data=X.prot,
method="ML",control=lmeControl(optimMethod="BFGS",maxIter=100,opt="optim"))
summary(Mod2)$tTable
# Plot results
ggplot(mapping=aes(x=as.factor(Size),y=prot.ab),data=X.prot) +
geom_boxplot() + facet_wrap(~ day)
ggplot(mapping=aes(x=day,y=prot.ab),data=X.prot) +
geom_boxplot(col="blue",alpha=0.5)
# Run model
Mod3 <- nlme:::lme(prot.rich ~ Treatment*Size*day.cont,
random = ~ 1|Replicate, data=X.prot,
method="ML",control=lmeControl(optimMethod="BFGS",maxIter=100,opt="optim"))
summary(Mod3)$tTable
# Run model
Mod3 <- nlme:::lme(prot.rich ~ Treatment*Size*day.cont,
random = ~ as.factor(day)|Replicate, data=X.prot,
method="ML",control=lmeControl(optimMethod="BFGS",maxIter=100,opt="optim"))
summary(Mod3)$tTable
# Run model
Mod3 <- nlme:::lme(prot.rich ~ Treatment*Size*day.cont,
random = ~ 1|Replicate, data=X.prot,
method="ML",control=lmeControl(optimMethod="BFGS",maxIter=100,opt="optim"))
summary(Mod3)$tTable
# Plot results
X1.1 <- X1 %>%
filter(day==29)
# Plot results
X1.1 <- X.prot %>%
filter(day==29)
ggplot(mapping=aes(x=as.factor(Size),y=prot.rich),data=X1.1) +
geom_boxplot(col="blue",alpha=0.5) -> p1
ggplot(mapping=aes(x=day.cont,y=prot.rich),data=X.prot) +
geom_point(col="blue",alpha=0.5)  -> p2
grid.arrange(p1,p2,ncol=2)
# Plot results
X1.1 <- X.prot %>%
filter(day==29)
ggplot(mapping=aes(x=as.factor(Size),y=prot.rich),data=X1.1) +
geom_boxplot(col="blue",alpha=0.5) -> p1
ggplot(mapping=aes(x=day,y=prot.rich),data=X.prot) +
geom_point(col="blue",alpha=0.5)  -> p2
grid.arrange(p1,p2,ncol=2)
# Plot results
X1.1 <- X.prot %>%
filter(day==29)
ggplot(mapping=aes(x=as.factor(Size),y=prot.rich),data=X1.1) +
geom_boxplot(col="blue",alpha=0.5) -> p1
ggplot(mapping=aes(x=as.factor(day),y=prot.rich),data=X.prot) +
geom_point(col="blue",alpha=0.5)  -> p2
grid.arrange(p1,p2,ncol=2)
# Plot results
X1.1 <- X.prot %>%
filter(day==29)
ggplot(mapping=aes(x=as.factor(Size),y=prot.rich),data=X1.1) +
geom_boxplot(col="blue",alpha=0.5) -> p1
ggplot(mapping=aes(x=day,y=prot.rich),data=X.prot) +
geom_boxplot(col="blue",alpha=0.5)  -> p2
grid.arrange(p1,p2,ncol=2)
#Extract data
X.bact <- data %>%
filter(day!=0 & Replicate %in% c("A","B")) %>%
mutate(Treatment = as.factor(Treatment),
day = factor(day,levels=c("7","15","21","29")),
day.cont = log(as.numeric(as.character(day))),
Size = as.numeric(as.character(Size)),
centrality = as.numeric(as.character(centrality)),
dist.outlet = as.numeric(as.character(dist.outlet)))
Mod4 <- nlme:::lme(bact.green ~ Treatment*Size + degree + dist.outlet + centrality,
random = ~ as.factor(day)|Replicate, data=X.bact,
method="ML",control=lmeControl(optimMethod="BFGS",maxIter=100,opt="optim"))
summary(Mod4)$tTable
#Extract data
X.bact <- data %>%
filter(day!=0 & Replicate %in% c("A","B")) %>%
mutate(Treatment = as.factor(Treatment),
day = factor(day,levels=c("7","15","21","29")),
day.cont = log(as.numeric(as.character(day))),
Size = as.numeric(as.character(Size)),
centrality = as.numeric(as.character(centrality)),
dist.outlet = as.numeric(as.character(dist.outlet)))
#Run model (no log transformation based on histogramm of residuals)
Mod4 <- nlme:::lme(bact.green ~ Treatment*Size*day.cont + degree + dist.outlet + centrality,
random = ~ 1|Replicate, data=X.bact,
method="ML",control=lmeControl(optimMethod="BFGS",maxIter=100,opt="optim"))
summary(Mod4)$tTable
#Extract data
X.bact <- data %>%
filter(day!=0 & Replicate %in% c("A","B")) %>%
mutate(Treatment = as.factor(Treatment),
day = factor(day,levels=c("7","15","21","29")),
day.cont = log(as.numeric(as.character(day))),
Size = as.numeric(as.character(Size)),
centrality = as.numeric(as.character(centrality)),
dist.outlet = as.numeric(as.character(dist.outlet)))
#Run model (no log transformation based on histogramm of residuals)
Mod4 <- nlme:::lme(bact.green ~ Treatment*Size*day + degree + dist.outlet + centrality,
random = ~ 1|Replicate, data=X.bact,
method="ML",control=lmeControl(optimMethod="BFGS",maxIter=100,opt="optim"))
summary(Mod4)$tTable
#Extract data
X.bact <- data %>%
filter(day!=0 & Replicate %in% c("A","B")) %>%
mutate(Treatment = as.factor(Treatment),
day = factor(day,levels=c("7","15","21","29")),
day.cont = log(as.numeric(as.character(day))),
Size = as.numeric(as.character(Size)),
centrality = as.numeric(as.character(centrality)),
dist.outlet = as.numeric(as.character(dist.outlet)))
#Run model (no log transformation based on histogramm of residuals)
Mod4 <- nlme:::lme(bact.green ~ Treatment*Size*day.cont + degree,
random = ~ 1|Replicate, data=X.bact,
method="ML",control=lmeControl(optimMethod="BFGS",maxIter=100,opt="optim"))
summary(Mod4)$tTable
#Extract data
X.bact <- data %>%
filter(day!=0 & Replicate %in% c("A","B")) %>%
mutate(Treatment = as.factor(Treatment),
day = factor(day,levels=c("7","15","21","29")),
day.cont = log(as.numeric(as.character(day))),
Size = as.numeric(as.character(Size)),
centrality = as.numeric(as.character(centrality)),
dist.outlet = as.numeric(as.character(dist.outlet)))
#Run model (no log transformation based on histogramm of residuals)
Mod4 <- nlme:::lme(bact.green ~ Treatment*Size + degree,
random = ~ as.factor(day)|Replicate, data=X.bact,
method="ML",control=lmeControl(optimMethod="BFGS",maxIter=100,opt="optim"))
summary(Mod4)$tTable
#Extract data
X.bact <- data %>%
filter(day!=0 & Replicate %in% c("A","B")) %>%
mutate(Treatment = as.factor(Treatment),
day = factor(day,levels=c("7","15","21","29")),
day.cont = log(as.numeric(as.character(day))),
Size = as.numeric(as.character(Size)),
centrality = as.numeric(as.character(centrality)),
dist.outlet = as.numeric(as.character(dist.outlet)))
#Run model (no log transformation based on histogramm of residuals)
#Also: here Time was not significant so it was removed from the fixed variables
Mod4 <- nlme:::lme(bact.green ~ Treatment*as.factor(Size) + degree,
random = ~ as.factor(day)|Replicate, data=X.bact,
method="ML",control=lmeControl(optimMethod="BFGS",maxIter=100,opt="optim"))
summary(Mod4)$tTable
#Extract data
X.bact <- data %>%
filter(day!=0 & Replicate %in% c("A","B")) %>%
mutate(Treatment = as.factor(Treatment),
day = factor(day,levels=c("7","15","21","29")),
day.cont = log(as.numeric(as.character(day))),
Size = as.numeric(as.character(Size)),
centrality = as.numeric(as.character(centrality)),
dist.outlet = as.numeric(as.character(dist.outlet)))
#Run model (no log transformation based on histogramm of residuals)
#Also: here Time was not significant so it was removed from the fixed variables
Mod4 <- nlme:::lme(bact.green ~ Treatment*Size + degree,
random = ~ as.factor(day)|Replicate, data=X.bact,
method="ML",control=lmeControl(optimMethod="BFGS",maxIter=100,opt="optim"))
summary(Mod4)$tTable
bind.out_Res_protist
LRR_Res_protist
bind.out_Res_green
LRR_bact_green <- cbind(bacteria,0.2313328,0.3173062,0.1453594)
LRR_bact_green <- cbind("bacteria",0.2313328,0.3173062,0.1453594)
LRR_bact_green
rbind(LRR_Res_protist,LRR_bact_green)
LRR_bact_green <- data.frame(species="bacteria",LRR=0.2313328,CI_upper=0.3173062,CI_lower=0.1453594)
LRR_bact_green
rbind(LRR_Res_protist,LRR_bact_green)
#Create output file
LRR_Res_protist <- data.frame(species=character(0),LRR=numeric(0),CI_upper=numeric(0),CI_lower=numeric(0))
#Loop for each species
for(i in 1:length(SP)) {
# Extract info for SP[i] and summarise data
D_Res_protist <- data %>%
filter(day !=0) %>%
select(SP[i],day, Treatment, Replicate, Size, centrality, degree, dist.outlet) %>%
mutate(Treatment = as.factor(Treatment),
Replicate = as.factor(Replicate),
Size = as.factor(Size))  %>%
Rmisc::summarySE(.,measurevar = SP[i], groupvars = c("Treatment")) #get the mean by treatment level for each species
LRR <- log(D_Res_protist[1,3]) - log(D_Res_protist[2,3])
SE_LRR <- sqrt( (D_Res_protist$se[1]^2/D_Res_protist[1,3]^2) + (D_Res_protist$se[2]^2/D_Res_protist[2,3]^2) ) #From Hedge et al., 1999
CI_upper <- LRR + 1.96*SE_LRR
CI_lower <- LRR - 1.96*SE_LRR
#CI_both <- LRR + c(-1, 1) * qnorm(1 - (1 - 0.95)/2) * SE_LRR #from ARPobservation:::logRespRatio
species <- SP[i]
bind.out_Res_protist <- data.frame(species,LRR,CI_upper,CI_lower)
#colnames(bind.out) <- c("time","size","LRR","species","CI_upper","CI_lower")
LRR_Res_protist <- rbind.data.frame(LRR_Res_protist,bind.out_Res_protist)
}
#Data calculated later in the document (added here for plotting purpose only - see below)
LRR_bact_green <- data.frame(species="bacteria",LRR=0.2313328,CI_upper=0.3173062,CI_lower=0.1453594)
LRR_Res_protist <- rbind(LRR_Res_protist,LRR_bact_green)
#Create output file
LRR_Res_protist <- data.frame(species=character(0),LRR=numeric(0),CI_upper=numeric(0),CI_lower=numeric(0))
#Loop for each species
for(i in 1:length(SP)) {
# Extract info for SP[i] and summarise data
D_Res_protist <- data %>%
filter(day !=0) %>%
select(SP[i],day, Treatment, Replicate, Size, centrality, degree, dist.outlet) %>%
mutate(Treatment = as.factor(Treatment),
Replicate = as.factor(Replicate),
Size = as.factor(Size))  %>%
Rmisc::summarySE(.,measurevar = SP[i], groupvars = c("Treatment")) #get the mean by treatment level for each species
LRR <- log(D_Res_protist[1,3]) - log(D_Res_protist[2,3])
SE_LRR <- sqrt( (D_Res_protist$se[1]^2/D_Res_protist[1,3]^2) + (D_Res_protist$se[2]^2/D_Res_protist[2,3]^2) ) #From Hedge et al., 1999
CI_upper <- LRR + 1.96*SE_LRR
CI_lower <- LRR - 1.96*SE_LRR
#CI_both <- LRR + c(-1, 1) * qnorm(1 - (1 - 0.95)/2) * SE_LRR #from ARPobservation:::logRespRatio
species <- SP[i]
bind.out_Res_protist <- data.frame(species,LRR,CI_upper,CI_lower)
#colnames(bind.out) <- c("time","size","LRR","species","CI_upper","CI_lower")
LRR_Res_protist <- rbind.data.frame(LRR_Res_protist,bind.out_Res_protist)
}
#Data calculated later in the document (added here for plotting purpose only - see below)
LRR_bact_green <- data.frame(species="Bacteria_green",LRR=0.2313328,CI_upper=0.3173062,CI_lower=0.1453594)
LRR_Res_protist <- rbind(LRR_Res_protist,LRR_bact_green)
LRR_Res_protist
fig_dat_Res_protist <- LRR_Res_protist %>%
filter(species != "Other")
ggplot(fig_dat_Res_protist,mapping=aes(x=species,y=LRR)) + coord_cartesian(ylim = c(-0.8,0.5)) +
xlab("Species") + ylab("Effect size (log ratio of means)") +
geom_errorbar(aes(ymin= CI_lower, ymax= CI_upper),linetype=1,width=0) +
geom_point() +
geom_hline(yintercept=0,lty=2) +
annotate("text", x=1, y=0.5,label="log(R+/R-) > 0",size=2.5,colour="darkgreen") +
annotate("text", x=1, y=-0.8,label="log(R+/R-) < 0",size=2.5,colour="darkred") + theme_classic()
fig_dat_Res_protist <- LRR_Res_protist %>%
filter(species != "Other")
ggplot(fig_dat_Res_protist,mapping=aes(x=species,y=LRR)) + coord_cartesian(ylim = c(-0.8,0.5)) +
xlab("Species") + ylab("Effect size (log ratio of means)") +
geom_rect(fill="gray",alpha=0.05, mapping=aes_string(x="size", y="LRR"), xmin=4, xmax=5.4, ymin=-Inf, ymax=Inf) +
geom_errorbar(aes(ymin= CI_lower, ymax= CI_upper),linetype=1,width=0) +
geom_point() +
geom_hline(yintercept=0,lty=2) +
annotate("text", x=1, y=0.5,label="log(R+/R-) > 0",size=2.5,colour="darkgreen") +
annotate("text", x=1, y=-0.8,label="log(R+/R-) < 0",size=2.5,colour="darkred") + theme_classic()
fig_dat_Res_protist <- LRR_Res_protist %>%
filter(species != "Other")
ggplot(fig_dat_Res_protist,mapping=aes(x=species,y=LRR)) + coord_cartesian(ylim = c(-0.8,0.5)) +
xlab("Species") + ylab("Effect size (log ratio of means)") +
geom_rect(fill="gray",alpha=0.05, mapping=aes_string(x="species", y="LRR"), xmin=4, xmax=5.4, ymin=-Inf, ymax=Inf) +
geom_errorbar(aes(ymin= CI_lower, ymax= CI_upper),linetype=1,width=0) +
geom_point() +
geom_hline(yintercept=0,lty=2) +
annotate("text", x=1, y=0.5,label="log(R+/R-) > 0",size=2.5,colour="darkgreen") +
annotate("text", x=1, y=-0.8,label="log(R+/R-) < 0",size=2.5,colour="darkred") + theme_classic()
fig_dat_Res_protist <- LRR_Res_protist %>%
filter(species != "Other")
ggplot(fig_dat_Res_protist,mapping=aes(x=species,y=LRR)) + coord_cartesian(ylim = c(-0.8,0.5)) +
xlab("Species") + ylab("Effect size (log ratio of means)") +
geom_rect(fill="gray",alpha=0.05, mapping=aes_string(x="species", y="LRR"), xmin=6, xmax=8, ymin=-Inf, ymax=Inf) +
geom_errorbar(aes(ymin= CI_lower, ymax= CI_upper),linetype=1,width=0) +
geom_point() +
geom_hline(yintercept=0,lty=2) +
annotate("text", x=1, y=0.5,label="log(R+/R-) > 0",size=2.5,colour="darkgreen") +
annotate("text", x=1, y=-0.8,label="log(R+/R-) < 0",size=2.5,colour="darkred") + theme_classic()
fig_dat_Res_protist <- LRR_Res_protist %>%
filter(species != "Other")
ggplot(fig_dat_Res_protist,mapping=aes(x=species,y=LRR)) + coord_cartesian(ylim = c(-0.8,0.5)) +
xlab("Species") + ylab("Effect size (log ratio of means)") +
geom_rect(fill="gray",alpha=0.05, mapping=aes_string(x="species", y="LRR"), xmin=7.8, xmax=8.1, ymin=-Inf, ymax=Inf) +
geom_errorbar(aes(ymin= CI_lower, ymax= CI_upper),linetype=1,width=0) +
geom_point() +
geom_hline(yintercept=0,lty=2) +
annotate("text", x=1, y=0.5,label="log(R+/R-) > 0",size=2.5,colour="darkgreen") +
annotate("text", x=1, y=-0.8,label="log(R+/R-) < 0",size=2.5,colour="darkred") + theme_classic()
fig_dat_Res_protist <- LRR_Res_protist %>%
filter(species != "Other")
ggplot(fig_dat_Res_protist,mapping=aes(x=species,y=LRR)) + coord_cartesian(ylim = c(-0.8,0.5)) +
xlab("Species") + ylab("Effect size (log ratio of means)") +
geom_rect(fill="gray",alpha=0.05, mapping=aes_string(x="species", y="LRR"), xmin=7.9, xmax=8.1, ymin=-Inf, ymax=Inf) +
geom_errorbar(aes(ymin= CI_lower, ymax= CI_upper),linetype=1,width=0) +
geom_point() +
geom_hline(yintercept=0,lty=2) +
annotate("text", x=1, y=0.5,label="log(R+/R-) > 0",size=2.5,colour="darkgreen") +
annotate("text", x=1, y=-0.8,label="log(R+/R-) < 0",size=2.5,colour="darkred") + theme_classic()
fig_dat_Res_protist <- LRR_Res_protist %>%
filter(species != "Other")
ggplot(fig_dat_Res_protist,mapping=aes(x=species,y=LRR)) + coord_cartesian(ylim = c(-0.8,0.5)) +
xlab("Species") + ylab("Effect size (log ratio of means)") +
geom_rect(fill="darkgreen",alpha=0.05, mapping=aes_string(x="species", y="LRR"), xmin=7.9, xmax=8.1, ymin=-Inf, ymax=Inf) +
geom_errorbar(aes(ymin= CI_lower, ymax= CI_upper),linetype=1,width=0) +
geom_point() +
geom_hline(yintercept=0,lty=2) +
annotate("text", x=1, y=0.5,label="log(R+/R-) > 0",size=2.5,colour="darkgreen") +
annotate("text", x=1, y=-0.8,label="log(R+/R-) < 0",size=2.5,colour="darkred") + theme_classic()
#Create output file
LRR_Res_protist <- data.frame(species=character(0),LRR=numeric(0),CI_upper=numeric(0),CI_lower=numeric(0))
#Loop for each species
for(i in 1:length(SP)) {
# Extract info for SP[i] and summarise data
D_Res_protist <- data %>%
filter(day !=0) %>%
select(SP[i],day, Treatment, Replicate, Size, centrality, degree, dist.outlet) %>%
mutate(Treatment = as.factor(Treatment),
Replicate = as.factor(Replicate),
Size = as.factor(Size))  %>%
Rmisc::summarySE(.,measurevar = SP[i], groupvars = c("Treatment")) #get the mean by treatment level for each species
LRR <- log(D_Res_protist[1,3]) - log(D_Res_protist[2,3])
SE_LRR <- sqrt( (D_Res_protist$se[1]^2/D_Res_protist[1,3]^2) + (D_Res_protist$se[2]^2/D_Res_protist[2,3]^2) ) #From Hedge et al., 1999
CI_upper <- LRR + 1.96*SE_LRR
CI_lower <- LRR - 1.96*SE_LRR
#CI_both <- LRR + c(-1, 1) * qnorm(1 - (1 - 0.95)/2) * SE_LRR #from ARPobservation:::logRespRatio
species <- SP[i]
bind.out_Res_protist <- data.frame(species,LRR,CI_upper,CI_lower)
#colnames(bind.out) <- c("time","size","LRR","species","CI_upper","CI_lower")
LRR_Res_protist <- rbind.data.frame(LRR_Res_protist,bind.out_Res_protist)
}
#Data calculated later in the document (added here for plotting purpose only - see below)
LRR_bact_green <- data.frame(species="Bact (green)",LRR=0.2313328,CI_upper=0.3173062,CI_lower=0.1453594)
LRR_Res_protist <- rbind(LRR_Res_protist,LRR_bact_green)
#Create output file
LRR_Res_protist <- data.frame(species=character(0),LRR=numeric(0),CI_upper=numeric(0),CI_lower=numeric(0))
#Loop for each species
for(i in 1:length(SP)) {
# Extract info for SP[i] and summarise data
D_Res_protist <- data %>%
filter(day !=0) %>%
select(SP[i],day, Treatment, Replicate, Size, centrality, degree, dist.outlet) %>%
mutate(Treatment = as.factor(Treatment),
Replicate = as.factor(Replicate),
Size = as.factor(Size))  %>%
Rmisc::summarySE(.,measurevar = SP[i], groupvars = c("Treatment")) #get the mean by treatment level for each species
LRR <- log(D_Res_protist[1,3]) - log(D_Res_protist[2,3])
SE_LRR <- sqrt( (D_Res_protist$se[1]^2/D_Res_protist[1,3]^2) + (D_Res_protist$se[2]^2/D_Res_protist[2,3]^2) ) #From Hedge et al., 1999
CI_upper <- LRR + 1.96*SE_LRR
CI_lower <- LRR - 1.96*SE_LRR
#CI_both <- LRR + c(-1, 1) * qnorm(1 - (1 - 0.95)/2) * SE_LRR #from ARPobservation:::logRespRatio
species <- SP[i]
bind.out_Res_protist <- data.frame(species,LRR,CI_upper,CI_lower)
#colnames(bind.out) <- c("time","size","LRR","species","CI_upper","CI_lower")
LRR_Res_protist <- rbind.data.frame(LRR_Res_protist,bind.out_Res_protist)
}
#Data calculated later in the document (added here for plotting purpose only - see below)
LRR_bact_green <- data.frame(species="Bact (green)",LRR=0.2313328,CI_upper=0.3173062,CI_lower=0.1453594)
LRR_Res_protist <- rbind(LRR_Res_protist,LRR_bact_green)
fig_dat_Res_protist <- LRR_Res_protist %>%
filter(species != "Other")
ggplot(fig_dat_Res_protist,mapping=aes(x=species,y=LRR)) + coord_cartesian(ylim = c(-0.8,0.5)) +
xlab("Species") + ylab("Effect size (log ratio of means)") +
geom_rect(fill="darkgreen",alpha=0.05, mapping=aes_string(x="species", y="LRR"), xmin=7.9, xmax=8.1, ymin=-Inf, ymax=Inf) +
geom_errorbar(aes(ymin= CI_lower, ymax= CI_upper),linetype=1,width=0) +
geom_point() +
geom_hline(yintercept=0,lty=2) +
annotate("text", x=1, y=0.5,label="log(R+/R-) > 0",size=2.5,colour="darkgreen") +
annotate("text", x=1, y=-0.8,label="log(R+/R-) < 0",size=2.5,colour="darkred") + theme_classic()
D_Res_blue_bact <- data %>%
filter(day !=0 & Replicate %in% c("A","B")) %>%
Rmisc::summarySE(.,measurevar = "bact.blue", groupvars = c("Treatment"))
species <- "bact.blue"
LRR <- log(D_Res_blue_bact[1,3]) - log(D_Res_blue_bact[2,3])
SE_LRR <- sqrt( (D_Res_blue_bact$se[1]^2/D_Res_blue_bact[1,3]^2) + (D_Res_blue_bact$se[2]^2/D_Res_blue_bact[2,3]^2) ) #From Hedge et al., 1999
CI_upper <- LRR + 1.96*SE_LRR
CI_lower <- LRR - 1.96*SE_LRR
bind.out_Res_blue_bact <- data.frame(species,LRR,CI_upper,CI_lower)
ggplot(bind.out_Res_blue_bact,mapping=aes(x=species,y=LRR)) + coord_cartesian(ylim = c(-0.1,0.5)) +
ylab("Effect size (log ratio of means)") + xlab("Bacteria in blue ecosystem") +
geom_errorbar(aes(ymin=CI_lower, ymax=CI_upper), width=0) +
geom_point() +
geom_hline(yintercept=0,lty=2) +
annotate("text", x=0.7, y=0.7,label="log(R+/R-) > 0",size=2.5,colour="darkgreen") +
annotate("text", x=0.7, y=-1.5,label="log(R+/R-) < 0",size=2.5,colour="darkred") + theme_classic()
ggplot(bind.out_Res_blue_bact,mapping=aes(x=species,y=LRR)) +
ylab("Effect size (log ratio of means)") + xlab("Bacteria in blue ecosystem") +
geom_errorbar(aes(ymin=CI_lower, ymax=CI_upper), width=0) +
geom_point() +
geom_hline(yintercept=0,lty=2) +
annotate("text", x=0.7, y=0.7,label="log(R+/R-) > 0",size=2.5,colour="darkgreen") +
annotate("text", x=0.7, y=-1.5,label="log(R+/R-) < 0",size=2.5,colour="darkred") + theme_classic()
#Run model (no log transformation based on histogramm of residuals)
Mod1 <- nlme:::lme(bact.blue ~ Treatment*Size*day.cont + bact.green,
random = ~ as.factor(day)|Replicate, data=X.bact,
method="ML",control=lmeControl(optimMethod="BFGS",maxIter=100,opt="optim"))
summary(Mod1)$tTable
#Run model (no log transformation based on histogramm of residuals)
Mod1 <- nlme:::lme(bact.blue ~ Treatment*Size*day.cont + bact.green,
random = ~ 1|Replicate, data=X.bact,
method="ML",control=lmeControl(optimMethod="BFGS",maxIter=100,opt="optim"))
summary(Mod1)$tTable
#Run model (no log transformation based on histogramm of residuals)
Mod1 <- nlme:::lme(bact.blue ~ Treatment*Size*day.cont + bact.green,
random = ~ 1|Replicate, data=X.bact,
method="ML",control=lmeControl(optimMethod="BFGS",maxIter=100,opt="optim"))
summary(Mod1)$tTable
#Run model (no log transformation based on histogramm of residuals)
Mod1 <- nlme:::lme(bact.blue ~ Treatment*Size + bact.green,
random = ~ 1|Replicate, data=X.bact,
method="ML",control=lmeControl(optimMethod="BFGS",maxIter=100,opt="optim"))
summary(Mod1)$tTable
#Run model (no log transformation based on histogramm of residuals)
Mod1 <- nlme:::lme(bact.blue ~ Treatment*Size*day.cont + bact.green,
random = ~ 1|Replicate, data=X.bact,
method="ML",control=lmeControl(optimMethod="BFGS",maxIter=100,opt="optim"))
summary(Mod1)$tTable
